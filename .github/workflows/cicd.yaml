# .github/workflows/cicd.yaml

on:
  push: # Workflow будет запускаться при каждом push в репозиторий
    branches: [ main, master ] # Укажите ветки, при push в которые должен запускаться workflow

jobs:
  # --- Этап Continuous Integration (CI) ---

  testing:
    name: Run Tests
    runs-on: ubuntu-latest # Виртуальная машина для выполнения job

    steps:
      - name: Checkout code # Шаг: Клонирование кода из репозитория
        uses: actions/checkout@v4

      - name: Set up Python # Шаг: Настройка окружения Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Укажите нужную версию Python

      - name: Install dependencies # Шаг: Установка зависимостей (Flask, Pytest)
        run: pip install flask pytest

      - name: Run tests # Шаг: Запуск тестов
        run: pytest

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: testing # <-- Эта job зависит от job 'testing'. Она выполнится только если 'testing' пройдет успешно.

    permissions:
      contents: read # Разрешение на чтение содержимого репозитория
      packages: write # Разрешение на запись пакетов (для GHCR)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry # Шаг: Вход в GHCR
        uses: docker/login-action@v3 # Используем action для аутентификации
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Имя пользователя/организации GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Встроенный токен GitHub (имеет права на push в GHCR при наличии permissions.packages: write)

      - name: Extract metadata (tags, labels) for Docker # Шаг: Генерация тегов и меток для образа
        id: meta # Присваиваем ID для доступа к output
        uses: docker/metadata-action@v5 # Используем action для генерации метаданных
        with:
          images: ghcr.io/${{ github.repository }} # Указываем базовое имя образа
          # Настройка тегов. Здесь образ будет помечен тегами 'latest' и SHA коммита.
          tags: |
            type=latest
            type=sha

      - name: Build and push Docker image # Шаг: Сборка и публикация образа
        uses: docker/build-push-action@v5 # Используем action для сборки и push
        with:
          context: . # Путь к Dockerfile ('.' означает корень репозитория. Измените, если Dockerfile в другом месте)
          push: true # Включаем публикацию образа
          tags: ${{ steps.meta.outputs.tags }} # Используем сгенерированные теги
          labels: ${{ steps.meta.outputs.labels }} # Используем сгенерированные метки
          cache-from: type=gha # Включение кеширования сборки
          cache-to: type=gha,mode=max # Настройка кеширования сборки

  # --- Этап Continuous Deployment (CD) ---

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [testing, build] # <-- Эта job зависит от job 'testing' И 'build'. Она выполнится только если ОБЕ предыдущие пройдут успешно.

    steps:
      - name: Deploy via SSH # Шаг: Подключение к серверу EC2 по SSH и выполнение команд развертывания
        # Используем популярный сторонний action для SSH-соединений
        uses: appleboy/ssh-action@v1.0.0 # Убедитесь, что используете актуальную версию action

        with:
          host: ${{ secrets.SSH_HOST }} # <-- Секрет GitHub: Публичный IP или DNS вашего EC2 инстанса
          username: ubuntu # <-- Имя пользователя на EC2 (для Ubuntu AMI по умолчанию 'ubuntu')
          key: ${{ secrets.SSH_PRIVATE_KEY }} # <-- Секрет GitHub: Содержимое вашего приватного ключа SSH (.pem файла)
          script: | # <-- Команды, которые будут выполнены на сервере EC2
            echo "Connecting to EC2 instance..."
            # Переходим в каталог с docker-compose.yaml на сервере
            cd /home/ubuntu/test_cicd
            echo "Changed directory to $(pwd)"

            # Обновляем образ контейнера (загружаем последнюю версию, которую только что собрал CI)
            # Предполагается, что ваш docker-compose.yaml использует тег, который обновляется (например, 'latest')
            echo "Pulling latest Docker image..."
            docker compose pull

            # Перезапускаем приложение: останавливаем старый контейнер и запускаем новый с обновленным образом
            # --force-recreate гарантирует создание нового контейнера, даже если тег образа не изменился (например, 'latest')
            # -d запускает в фоновом режиме
            # --no-deps полезно, если у вас несколько сервисов, но вы обновляете только один
            echo "Restarting Docker Compose services..."
            docker compose up -d --force-recreate --no-deps

            echo "Deployment script finished."
            # Опционально: очистка старых неиспользуемых образов для экономии места
            # echo "Pruning old docker images..."
            # docker image prune -f